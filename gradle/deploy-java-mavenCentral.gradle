/*
# MavenCentral and Artifactory release task for a Java library

## Requirements
* deploy.gradle file in the projectDir:
ext.deploy = [
    "siteUrl"           : "site url",
    "gitUrl"            : "git url",
    "groupId"           : "package name",
    "licenseName"       : "MIT",
    "licenseUrl"        : "https ://opensource.org/licenses/MIT",
    "id"                : "the package id"
]

* defined ext.ver."$deploy.id" or "version", eg
version = 1.0

* ~/.gradle/gradle.properties file with MavenCentral and Artifactory credentials
mavenSigningKeyId=
mavenSigningPassword=
mavenSigningSecretKeyRingFile=
mavenOssrhUsername=
mavenOssrhPassword=
mavenSonatypeStagingProfileId=

hmArtifactoryUrl=
hmArtifactoryPublishUser=
hmArtifactoryPublishPassword=

* gpg keypair created and uploaded to hkp://pool.sks-keyservers.net

### Release process:

* update ext.ver values in *all* build.gradle or use -Pversion property

* Call `./gradlew publishReleasePublicationToMavenCentralRepository` to publish to MavenCentral
* Call `./gradlew publishReleasePublicationToArtifactoryRepository` to publish to Artifactory

* Call `./gradlew publish` to release to both MavenCentral and Artifactory

Artifactory:
If publishing the same version number, the package will be overwritten in dev, rejected in release.

See more generated tasks in gradle publishing section.
*/

if (project.hasProperty("mavenSigningKeyId")) {
    apply plugin: "maven-publish"
    apply plugin: 'signing'
    apply from: "$projectDir/deploy.gradle"

    java {
        withJavadocJar()
        withSourcesJar()
    }

    // ^^ these are the same as java { block

    publishing {
        repositories {
            publications {
                release(MavenPublication) {
                    // use either ver."$deploy.id" or version
                    def deployVersion = ver."$deploy.id"
                    if (deployVersion == null) deployVersion = project.version

                    // force to use remote dependencies, not local submodules
                    def runTasks = gradle.startParameter.taskNames.toString()
                    if (runTasks.contains("publish") || runTasks.contains("bintrayUpload")) {
                        project.rootProject.ext.setProperty("depLocation", 1)
                    }

                    groupId = deploy.groupId
                    artifactId = deploy.id
                    version = deployVersion

                    artifacts {
                        archives javadocJar, sourcesJar
                    }

                    pom {
                        name = deploy.id
                        url = deploy.siteUrl
                        inceptionYear = '2020'
                        description = deploy.id
                        licenses {
                            license {
                                name = deploy.licenseName
                                url = deploy.licenseUrl
                            }
                        }
                        developers {
                            developer {
                                id = 'tonis'
                                name = 'Tonis Tiganik'
                                email = 'ttiganik@high-mobility.com'
                            }
                        }
                        scm {
                            connection = deploy.gitUrl
                            developerConnection = deploy.gitUrl
                            url = deploy.siteUrl
                        }
                    }
                }
            }

            maven {
                name = 'artifactory'
                def repoKey = project.hasProperty('repo') ? project.repo : "gradle-dev-local"
                url = "$hmArtifactoryUrl/$repoKey"
                credentials {
                    username hmArtifactoryPublishUser
                    password hmArtifactoryPublishPassword
                }
            }

            maven {
                name = 'mavenCentral'
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username mavenOssrhUsername
                    password mavenOssrhPassword
                }
            }
        }

    }

    signing {
        sign configurations.archives
    }
} else {
    println("Credentials don't exist for maven publishing")
}