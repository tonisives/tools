/*
# MavenCentral and Artifactory release task for a Java/Android library
## Requirements
* deploy.gradle file in the projectDir:
ext.deploy = [
    "siteUrl"           : "site url",
    "gitUrl"            : "git url",
    "groupId"           : "package name",
    "licenseName"       : "MIT",
    "licenseUrl"        : "https ://opensource.org/licenses/MIT",
    "id"                : "the package id"
]
* defined ext.ver."$deploy.id" or "version", eg
version = 1.0
* ~/.gradle/gradle.properties file with MavenCentral and Artifactory credentials
mavenSigningKeyId=
mavenSigningPassword=
mavenSigningSecretKeyRingFile=
mavenOssrhUsername=
mavenOssrhPassword=
mavenSonatypeStagingProfileId=
hmArtifactoryUrl=
hmArtifactoryPublishUser=
hmArtifactoryPublishPassword=
* gpg keypair created and uploaded to hkp://pool.sks-keyservers.net

### Release process:

* update ext.ver values in *all* build.gradle or use -Pversion property
* Call `./gradlew publishReleasePublicationToMavenCentralRepository` to publish to MavenCentral
* Call `./gradlew publishReleasePublicationToArtifactoryRepository` to publish to release Artifactory
add -Prepo=gradle-dev-local to dev repo
* Call `./gradlew publish` to release to both MavenCentral and Artifactory
*/

if (project.hasProperty("mavenSigningKeyId")) {
    apply plugin: "maven-publish"
    apply plugin: 'signing'
    apply from: "$projectDir/deploy.gradle"

    // build the .aar first. can try removing this and manually building if publish fails.
    tasks.withType(PublishToMavenRepository) { it.dependsOn clean, build }

    def isAndroid = project.plugins.findPlugin("com.android.library")

    publishing {
        publications {
            release(MavenPublication) {
                // get aar or jar for android/java libs
                if (isAndroid) {
                    task sourceJar(type: Jar) {
                        from android.sourceSets.main.java.srcDirs
                        classifier "sources"
                    }

                    artifact(sourceJar)
                    artifact("$buildDir/outputs/aar/${deploy.id}-release.aar")
                } else {
                    java {
                        withJavadocJar()
                        withSourcesJar()
                    }

                    from components.java
                }

                // use either ver."$deploy.id" or version
                def deployVersion = ver."$deploy.id"
                if (deployVersion == null) deployVersion = project.version

                // force to use remote dependencies, not local submodules
                // ------It seems this is not necessary anymore. if include the subproject, then in release pom the correct version is used still 
                // def runTasks = gradle.startParameter.taskNames.toString()
                // if (runTasks.contains("publish")) {
                //     project.rootProject.ext.setProperty("depLocation", 1)
                // }

                groupId = deploy.groupId
                artifactId = deploy.id
                version = deployVersion

                pom {
                    name = deploy.id
                    url = deploy.siteUrl
                    inceptionYear = '2020'
                    description = deploy.id
                    licenses {
                        license {
                            name = deploy.licenseName
                            url = deploy.licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = 'tonis'
                            name = 'Tonis Tiganik'
                            email = 'ttiganik@high-mobility.com'
                        }
                        developer {
                            id = 'kevin'
                            name = 'Kevin Valdek'
                            email = 'kevin@high-mobility.com'
                        }
                    }
                    scm {
                        connection = deploy.gitUrl
                        developerConnection = deploy.gitUrl
                        url = deploy.siteUrl
                    }

                    if (isAndroid) {
                        // needed for .aar transitive dependencies
                        withXml {
                            def dependenciesNode = asNode()['dependencies'][0] ?: asNode().appendNode('dependencies')
                            configurations.implementation.allDependencies.each {
                                if (it.name != 'unspecified') {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = 'artifactory'
                def repoKey = project.hasProperty('repo') ? project.repo : "gradle-release-local"
                url = "$hmArtifactoryUrl/$repoKey"
                credentials {
                    username hmArtifactoryPublishUser
                    password hmArtifactoryPublishPassword
                }
            }

            maven {
                name = 'mavenCentral'
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username mavenOssrhUsername
                    password mavenOssrhPassword
                }
            }
        }
    }

    ext["signing.keyId"] = mavenSigningKeyId
    ext["signing.password"] = mavenSigningPassword
    ext["signing.secretKeyRingFile"] = mavenSigningSecretKeyRingFile

    signing {
        sign publishing.publications
    }
} else {
    println("Credentials don't exist for maven publishing")
}